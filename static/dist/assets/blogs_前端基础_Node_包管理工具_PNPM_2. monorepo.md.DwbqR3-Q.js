import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.BOW58p_D.js";const E=JSON.parse('{"title":"monorepo","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/前端基础/Node/包管理工具/PNPM/2. monorepo.md","filePath":"blogs/前端基础/Node/包管理工具/PNPM/2. monorepo.md"}'),p={name:"blogs/前端基础/Node/包管理工具/PNPM/2. monorepo.md"},e=n(`<h1 id="monorepo" tabindex="-1">monorepo <a class="header-anchor" href="#monorepo" aria-label="Permalink to &quot;monorepo&quot;">​</a></h1><p>pnpm 支持 monorepo 模式的工作机制叫做 <a href="https://pnpm.io/zh/workspaces" target="_blank" rel="noreferrer">workspace(工作空间)</a>。</p><h2 id="pnpm-workspace-yaml文件" tabindex="-1"><code>pnpm-workspace.yaml</code>文件 <a class="header-anchor" href="#pnpm-workspace-yaml文件" aria-label="Permalink to &quot;\`pnpm-workspace.yaml\`文件&quot;">​</a></h2><p>它要求在代码仓的根目录下存有<code>pnpm-workspace.yaml</code>文件，这个文件用于指定哪些目录作为独立的工作空间，这个工作空间可以理解为一个子模块或者 npm 包。</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # packages 目录下的所有一级目录都作为一个独立的工作空间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;packages/*&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # packages 目录下的所有目录都作为一个独立的工作空间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;packages/**&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 所有目录下排除 test 目录及其左右子目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!**/test/**&#39;</span></span></code></pre></div><p>例如有一个项目有如下结构：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> symlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .pnpm/bar@1.0.0/node_modules/bar</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> symlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .pnpm/foo@1.0.0/node_modules/foo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c-1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c-2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm-workspace.yaml</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span></span></code></pre></div><p><code>pnpm-workspace.yaml</code>文件定义：a 目录、b 目录、c 目录下的所有子目录，都会各自被视为独立的模块。</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">c/*</span></span></code></pre></div><h2 id="操作根目录的依赖" tabindex="-1">操作根目录的依赖 <a class="header-anchor" href="#操作根目录的依赖" aria-label="Permalink to &quot;操作根目录的依赖&quot;">​</a></h2><p>在 workspace 模式下，项目根目录通常不会作为一个子模块或者 npm 包，而是主要作为一个管理中枢，执行一些全局操作，安装一些共有的依赖，每个子模块都能访问根目录的依赖，适合把 TypeScript、Vite、eslint 等公共开发依赖装在这里，下面简单介绍一些常用的中枢管理操作。</p><ul><li>创建一个<code>package.json</code>文件</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm init</span></span></code></pre></div><p>在项目跟目录下运行<code>pnpm install</code>，pnpm 会根据当前目录<code>package.json</code>中的依赖声明安装全部依赖，在 workspace 模式下会一并处理所有子模块的依赖安装。</p><ul><li>安装项目公共开发依赖，声明在根目录的<code>package.json - devDependencies</code>中。<code>-w</code>选项代表在 monorepo 模式下的根目录进行操作。</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm install -wD xxx</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 卸载</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm uninstall -w xxx</span></span></code></pre></div><ul><li>执行根目录<code>package.json</code>中的脚本</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm run xxx</span></span></code></pre></div><h2 id="操作工作空间的依赖" tabindex="-1">操作工作空间的依赖 <a class="header-anchor" href="#操作工作空间的依赖" aria-label="Permalink to &quot;操作工作空间的依赖&quot;">​</a></h2><p>在 workspace 模式下，pnpm 主要通过<a href="https://pnpm.io/zh/filtering" target="_blank" rel="noreferrer"><code>--filter/-F</code></a>选项过滤子模块，实现对各个工作空间进行精细化操作的目的。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm --filter/-F 具体包目录名/包的name/正则匹配包名/匹配目录 command</span></span></code></pre></div><h3 id="子模块安装外部依赖" tabindex="-1">子模块安装外部依赖 <a class="header-anchor" href="#子模块安装外部依赖" aria-label="Permalink to &quot;子模块安装外部依赖&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 为 a 包安装 lodash</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm --filter a install -S lodash </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生产依赖</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm --filter a install -D lodash </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开发依赖</span></span></code></pre></div><h3 id="子模块之间的互相依赖-workspace-协议" tabindex="-1">子模块之间的互相依赖（Workspace 协议） <a class="header-anchor" href="#子模块之间的互相依赖-workspace-协议" aria-label="Permalink to &quot;子模块之间的互相依赖（Workspace 协议）&quot;">​</a></h3><p>pnpm workspace 对内部依赖关系的表示不同于外部，它自己约定了一套 <a href="https://pnpm.io/zh/workspaces#workspace-%E5%8D%8F%E8%AE%AE-workspace" target="_blank" rel="noreferrer">Workspace 协议 (<code>workspace:</code>)</a>。</p><p>下面的例子演示了为 a 包安装内部依赖 b。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 给 a 模块安装 b 模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm --filter a install -S b</span></span></code></pre></div><p>最终 a 模块<code>package.json</code>如下</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:^&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>默认情况下，如果可用的 packages 与已声明的可用范围相匹配，pnpm 将从工作区链接这些 packages。 例如：</p><ul><li>如果<code>bar</code>引用<code>&quot;foo&quot;: &quot;^1.0.0&quot;</code>并且<code>foo@1.0.0</code>存在工作区，那么pnpm会从工作区将<code>foo@1.0.0</code>链接到<code>bar</code>。</li><li>如果<code>bar</code>的依赖项中有<code>&quot;foo&quot;: &quot;2.0.0&quot;</code>，而<code>foo@2.0.0</code>在工作空间中并不存在，则将从远程安装<code>foo@2.0.0</code>。这种行为带来了一些不确定性。</li></ul><p>幸运的是，pnpm 支持 workspace 协议（<code>workspace:</code>）。 当使用此协议时，pnpm 将拒绝解析除本地 workspace 包含的 package 之外的任何内容。</p><p>因此，当<code>&quot;foo@2.0.0&quot;</code>不存在于此 workspace 中时，安装<code>&quot;foo&quot;: &quot;workspace:2.0.0&quot;</code>时，安装将会失败。</p><p>当<code>.npmrc</code>文件中<code>link-workspace-packages</code>选项被设置为 false 时，这个协议将特别有用。 在这种情况下：</p><ul><li>对于使用<code>workspace:</code>协议声明的依赖 pnpm 会从当前工作空间链接所需的包。</li><li>没有使用<code>workspace:</code>协议声明的依赖依然会从远程或缓存中链接所需要的包。</li></ul><h4 id="通过别名引用-workspace-包" tabindex="-1">通过别名引用 workspace 包 <a class="header-anchor" href="#通过别名引用-workspace-包" aria-label="Permalink to &quot;通过别名引用 workspace 包&quot;">​</a></h4><p>如果要使用其他别名，那么以下语法也将起作用：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;alias-b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:b@*&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在发布之前，别名被转换为常规名称。 上面的示例将变为：<code>&quot;alias-b&quot;: &quot;npm:b@1.0.0&quot;</code>。</p><h4 id="通过相对路径引用-workspace-包" tabindex="-1">通过相对路径引用 workspace 包 <a class="header-anchor" href="#通过相对路径引用-workspace-包" aria-label="Permalink to &quot;通过相对路径引用 workspace 包&quot;">​</a></h4><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:../a&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在发布之前，这些将转换为所有包管理器支持的常规版本规范。</p><h3 id="根目录下怎么运行子模块脚本" tabindex="-1">根目录下怎么运行子模块脚本 <a class="header-anchor" href="#根目录下怎么运行子模块脚本" aria-label="Permalink to &quot;根目录下怎么运行子模块脚本&quot;">​</a></h3><p>使用<code>pnpm run</code>命令和<code>--filter/-F</code>：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;run-a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pnpm --filter=子模块 run 子模块中的scripts脚本&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><a href="https://pnpm.io/zh/cli/run" target="_blank" rel="noreferrer">pnpm run</a></li><li><a href="https://pnpm.io/zh/filtering" target="_blank" rel="noreferrer"><code>--filter/-F</code></a></li><li><a href="https://github.com/vitejs/vite/blob/main/package.json" target="_blank" rel="noreferrer">Vite参考</a></li></ul><h3 id="发布-workspace-包" tabindex="-1">发布 workspace 包 <a class="header-anchor" href="#发布-workspace-包" aria-label="Permalink to &quot;发布 workspace 包&quot;">​</a></h3><p>在实际发布 npm 包时（无论是通过<code>pnpm pack</code>，还是<code>pnpm publish</code>之类的发布命令），<code>workspace:^</code>会被替换成内部模块 b 的对应版本号(对应<code>package.json</code>中的<code>version</code>字段)。替换规律如下所示：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 固定版本依赖，被转换成 x.x.x</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:~&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// minor 版本依赖，将被转换成 ~x.x.x</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:^&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// major 版本依赖，将被转换成 ^x.x.x</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:^1.5.0&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // major 版本依赖，将被转换成 ^x.x.x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,49),l=[e];function t(h,k,o,d,r,c){return i(),a("div",null,l)}const F=s(p,[["render",t]]);export{E as __pageData,F as default};
