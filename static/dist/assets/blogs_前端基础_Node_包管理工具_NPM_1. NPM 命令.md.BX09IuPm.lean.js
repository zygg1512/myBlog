import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.BOW58p_D.js";const F=JSON.parse('{"title":"NPM 命令","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/前端基础/Node/包管理工具/NPM/1. NPM 命令.md","filePath":"blogs/前端基础/Node/包管理工具/NPM/1. NPM 命令.md"}'),e={name:"blogs/前端基础/Node/包管理工具/NPM/1. NPM 命令.md"},p=n(`<h1 id="npm-命令" tabindex="-1">NPM 命令 <a class="header-anchor" href="#npm-命令" aria-label="Permalink to &quot;NPM 命令&quot;">​</a></h1><h2 id="配置优先级" tabindex="-1">配置优先级 <a class="header-anchor" href="#配置优先级" aria-label="Permalink to &quot;配置优先级&quot;">​</a></h2><p><code>npm</code>可以从不同的来源获取其配置值，按优先级从高到低的顺序排序：</p><ol><li>命令行标记</li><li>环境变量 3.<code>.npmrc</code>文件</li><li>默认配置</li></ol><h3 id="命令行标记" tabindex="-1">命令行标记 <a class="header-anchor" href="#命令行标记" aria-label="Permalink to &quot;命令行标记&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm run serve --params=123</span></span></code></pre></div><p>执行上述命令时，会将配置项<code>params</code>的值设为<code>123</code>，通过<code>process.env.npm_config_params</code>可以访问其配置值</p><p><strong>这个时候的<code>params</code>配置值将覆盖所有其他来源存在的<code>params</code>配置值</strong></p><h3 id="env-环境变量" tabindex="-1">env 环境变量 <a class="header-anchor" href="#env-环境变量" aria-label="Permalink to &quot;env 环境变量&quot;">​</a></h3><p>在执行<code>npm run</code>脚本时，<code>npm</code>会设置一些特殊的<code>env</code>环境变量，并放到环境对象<code>process.env</code>中。没有值的环境配置将会默认为<code>true</code>。</p><p><code>package.json</code>中的所有字段，都会被设置为以<code>npm_package_</code>开头的环境变量比如<code>package.json</code>中有如下字段内容：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.1.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shenhao&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;repository&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;git&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;git+ssh://git@gitlab.com/xxxx/sh.git&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>通过<code>process.env.npm_package_name</code>可以获取到<code>package.json</code>中<code>name</code>字段的值<code>sh</code></li><li>通过<code>process.env.npm_package_repository_type</code>获取到嵌套属性<code>type</code>的值<code>git</code></li><li>此外，还会设置一个比较特殊的环境变量<code>npm_lifecycle_event</code>，表示正在运行的脚本名称 <ul><li>比如执行<code>npm run serve</code>的时候，<code>process.env.npm_lifecycle_event</code>值为<code>serve</code>，通过判断这个变量，可以将同一个脚本在不同的<code>npm scripts</code>中使用。</li></ul></li></ul><p>这些环境变量只能在<code>npm run</code>的脚本执行环境内拿到，正常执行的<code>node</code>脚本是获取不到的。所以，不能直接通过<code>env $npm_package_name</code>的形式访问，<strong>但可以在<code>scripts</code>中定义脚本来访问：</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;bundle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;echo $npm_package_name&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="npmrc文件" tabindex="-1"><code>.npmrc</code>文件 <a class="header-anchor" href="#npmrc文件" aria-label="Permalink to &quot;\`.npmrc\`文件&quot;">​</a></h3><p>通过修改<code>.npmrc</code>文件可以直接修改配置</p><p>系统中存在多个<code>.npmrc</code>文件，这些<code>.npmrc</code>文件被访问的优先级从高到低的顺序为：</p><ul><li>项目级的<code>.npmrc</code>文件 <ul><li>只作用在本项目下。在其他项目中，这些配置不生效。</li><li>通过创建这个<code>.npmrc</code>文件可以统一团队的<code>npm</code>配置规范。</li></ul></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 通过 process.env.npm_config_params 可以访问其配置值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npmrc</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 不会生成 package.lock.json 文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行 npm install，npm 会从环境变量中读取到这个配置项，从而不会生成 package-lock.json 文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">package_lock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div><ul><li>用户级的<code>.npmrc</code>文件。<code>npm config get userconfig</code>可以看到存放的路径</li><li>全局级的<code>.npmrc</code>文件。<code>npm config get globalconfig</code>可以看到存放的路径 -<code>npm</code>内置的<code>.npmrc</code>文件。这是一个不可更改的内置配置文件</li></ul><h3 id="默认配置" tabindex="-1">默认配置 <a class="header-anchor" href="#默认配置" aria-label="Permalink to &quot;默认配置&quot;">​</a></h3><p>通过<code>npm config ls -l</code>查看<code>npm</code>内部的默认配置参数 如果命令行、环境变量、所有配置文件都没有配置参数，则使用默认参数值</p><h2 id="npm-的几个实用命令" tabindex="-1">NPM 的几个实用命令 <a class="header-anchor" href="#npm-的几个实用命令" aria-label="Permalink to &quot;NPM 的几个实用命令&quot;">​</a></h2><h3 id="npm-config-指令" tabindex="-1">npm config 指令 <a class="header-anchor" href="#npm-config-指令" aria-label="Permalink to &quot;npm config 指令&quot;">​</a></h3><p><code>npm config</code>指令是 npm 提供的一组用于配置 npm 的命令。通过这些指令，可以对 npm 的配置进行修改、查询和删除等操作。npm 提供了几个<code>npm config</code>指令来进行 <strong>用户级和全局级配置</strong>： -<code>set</code> -<code>get</code> -<code>delete</code> -<code>list</code> -<code>edit</code></p><h4 id="set" tabindex="-1">set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">valu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--global]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 指定下载 npm 包的来源，默认为 https://registry.npmjs.org/ ，可以指定私有源</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm config set registry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## prefix 参数：指定全局安装的根目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm config set prefix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 配置 prefix 参数后，当再对包进行全局安装时，包会被安装到如下位置：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ## Mac 系统：{prefix}/lib/node_modules</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ## Windows 系统：{prefix}/node_modules</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 把可执行文件链接到如下位置：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ## Mac 系统：{prefix}/bin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  ## Windows 系统：{prefix}</span></span></code></pre></div><ul><li><strong>使用<code>-g|--global</code>标志修改或新增全局级配置</strong></li><li><strong>不使用的话修改的是用户级配置（相应级别的<code>.npmrc</code>文件会更新）</strong></li></ul><p><strong>注意</strong></p><ul><li>如果<code>key</code>不存在，则会将这个<code>key</code>添加到配置中</li><li>如果省略<code>value</code>，则<code>value</code>会被设置成<code>true</code></li><li>还可以覆盖<code>package.json</code>中某些字段的值：</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name：项目的名称。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version：项目的版本号。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> description：项目的描述信息。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main：项目的入口文件。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> repository：项目的代码仓库信息。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts：项目的脚本命令。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config：项目的配置信息。</span></span></code></pre></div><p>当使用<code>npm config set &lt;key&gt; &lt;value&gt;</code>命令设置一个配置项时，如果<code>&lt;key&gt;</code>与上述字段中的某个键相同，那么通过<code>process.env.npm_package_&lt;key&gt;</code>访问该配置项时，会获取到<code>npm config set</code>命令设置的值，而不是<code>package.json</code>中的值。</p><p>需要注意的是，<code>npm config set</code>命令只能覆盖<code>package.json</code>中的字段值，而不能新增或删除字段。如果需要新增或删除字段，需要直接编辑<code>package.json</code>文件。</p><p>比如覆盖<code>package.json</code>中<code>config</code>的值：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8080&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node server.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// server.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.log(process.env.npm_package_config_port) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 8080</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; npm config set foo:port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 3000</span></span></code></pre></div><h4 id="get" tabindex="-1">get <a class="header-anchor" href="#get" aria-label="Permalink to &quot;get&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 获取 npm 的全局安装路径</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prefix</span></span></code></pre></div><p>按照配置优先级，获取指定配置项的值</p><h4 id="delete" tabindex="-1">delete <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;delete&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p><code>npm</code>官网上说可以删除所有配置文件中指定的配置项，但经实验 <strong>无法删除项目级</strong> 的<code>.npmrc</code>文件里指定的配置项</p><h4 id="list" tabindex="-1">list <a class="header-anchor" href="#list" aria-label="Permalink to &quot;list&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-l] [--json]</span></span></code></pre></div><p>加上<code>-l</code>或者<code>--json</code>查看所有的配置项，包括默认的配置项。不加的话，不能查看默认的配置项</p><h4 id="edit" tabindex="-1">edit <a class="header-anchor" href="#edit" aria-label="Permalink to &quot;edit&quot;">​</a></h4><p>在编辑器中打开配置文件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [-g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--global]</span></span></code></pre></div><p>使用<code>-g|--global</code>标志编辑全局级配置和默认配置，不使用的话编辑用户级配置和默认配置</p><h3 id="查看-npm-脚本命令" tabindex="-1">查看 npm 脚本命令 <a class="header-anchor" href="#查看-npm-脚本命令" aria-label="Permalink to &quot;查看 npm 脚本命令&quot;">​</a></h3><p>查看当前项目的所有<code>npm</code>脚本命令最直接的办法就是打开项目中的<code>package.json</code>文件并检查<code>scripts</code>字段 还可以使用不带任何参数的<code>npm run</code>命令查看</p><h3 id="查看环境变量" tabindex="-1">查看环境变量 <a class="header-anchor" href="#查看环境变量" aria-label="Permalink to &quot;查看环境变量&quot;">​</a></h3><p>通过<code>env</code>查看当前的所有环境变量，而查看运行时的所有环境变量可以执行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> env</span></span></code></pre></div><h3 id="模块管理" tabindex="-1">模块管理 <a class="header-anchor" href="#模块管理" aria-label="Permalink to &quot;模块管理&quot;">​</a></h3><p>检查当前项目依赖的所有模块，包括子模块以及子模块的子模块：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list/ls</span></span></code></pre></div><p>打印结果</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jquery@3.5.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> loadsh@0.0.4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├─┬</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webpack@5.1.3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├─┬</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @types/eslint-scope@3.7.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├─┬</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @types/eslint@7.2.4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @types/estree@0.0.45</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deduped</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @types/json-schema@7.0.6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deduped</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @types/estree@0.0.45</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deduped</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @types/estree@0.0.45</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ├─┬</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @webassemblyjs/ast@1.9.0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre></div><p>如果还想查看模块的一些描述信息（<code>package.json</code>中的<code>description</code>中的内容）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 相当于npm ls --long</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> la/ll</span></span></code></pre></div><p>一个项目依赖的模块往往很多，可以限制输出模块的层级来查看：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list/ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --depth=0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> //</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 只列出父包依赖的模块（只显示第一层）</span></span></code></pre></div><p>检查项目中依赖的某个模块的当前版本信息：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list/ls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">packageNam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>查看某个模块包的版本信息：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 模块已经发布的最新的版本信息（不包括预发布版本）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> view/info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">packageNam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 模块所有的历史版本信息（包括预发布版本）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> view/info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">packageNam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> versions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 还能查看 package.json 中字段对应的值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> view/info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">packageNam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">package.json中的key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">值</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>查看一个模块到底是因为谁被安装进来的，如果显示为空则表明该模块为内置模块或者不存在：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ll</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">packageNam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>查看某个模块的所有信息，包括它的依赖、关键字、更新日期、贡献者、仓库地址和许可证等：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> outdated</span></span></code></pre></div><p>打印结果</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                  Current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Wanted</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">         Latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Location</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ansi-regex</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                 3.0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   3.0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          5.0.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  xxx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aproba</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                     1.2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   1.2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          2.0.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  xxx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aws4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                       1.9.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.11.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         1.11.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  xxx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">big.js</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                     5.2.2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   5.2.2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          6.0.2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  xxx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vue-loader</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                15.9.2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  15.9.5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  16.0.0-beta.4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  xxx</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre></div><p>删除项目中无关的模块：</p><p>无关模块是没有在<code>package.json</code>中列出的依赖包</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span></span></code></pre></div><h3 id="在不同的目录下运行脚本" tabindex="-1">在不同的目录下运行脚本 <a class="header-anchor" href="#在不同的目录下运行脚本" aria-label="Permalink to &quot;在不同的目录下运行脚本&quot;">​</a></h3><p>文件夹中肯定存在很多应用程序，而当想要启动某个应用程序时，肯定是通过<code>cd</code>指令一步步进入到你所想要启动的应用程序目录下，然后再执行启动命令</p><p><code>npm</code>提供了<code>--prefix</code>可以指定启动目录：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/your/folder</span></span></code></pre></div><h3 id="依赖锁定" tabindex="-1">依赖锁定 <a class="header-anchor" href="#依赖锁定" aria-label="Permalink to &quot;依赖锁定&quot;">​</a></h3><p>npm默认安装模块时，会通过<code>^</code>来限定所安装模块的主版本号。可以配置<code>npm</code>通过波浪符<code>~</code>来限定安装模块版本号：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save-prefix=&quot;~&quot;</span></span></code></pre></div><p>当然还可以配置<code>npm</code>仅安装精确版本号的模块：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save-exact</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><h3 id="本地开发模块调试-npm-link" tabindex="-1">本地开发模块调试（npm link） <a class="header-anchor" href="#本地开发模块调试-npm-link" aria-label="Permalink to &quot;本地开发模块调试（npm link）&quot;">​</a></h3><p>开发 NPM 模块的时候，有时我们会希望，边开发边试用，比如本地调试的时候，<code>require(&#39;myModule&#39;)</code>会自动加载本机开发中的模块。Node规定，使用一个模块时，需要将其安装到全局的或项目的<code>node_modules</code>目录之中。</p><p>对于开发中的模块，解决方法就是在全局的<code>node_modules</code>目录之中，生成一个软链接，指向模块的本地目录；<code>npm link</code>就能起到这个作用，会自动建立这个软链接。</p><p>设想这样一个场景，你开发了一个模块<code>myModule</code>，目录为<code>src/myModule</code>，你自己的项目<code>myProject</code>要用到这个模块，项目目录为<code>src/myProject</code>。</p><p>首先，在模块目录（<code>src/myModule</code>）下运行<code>npm link</code>命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">src/myModule$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span></span></code></pre></div><p>上面的命令会 <strong>在 NPM 的全局模块目录内，生成一个符号链接文件</strong>，该文件的名字就是<code>package.json</code>文件中<code>bin</code>字段指定的模块名：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/path/to/global/node_modules/myModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src/myModule</span></span></code></pre></div><p>这个时候，已经可以全局调用<code>myModule</code>模块了。但是，如果要让这个模块安装在项目内，还要进行下面的步骤：</p><p>切换到项目目录，再次运行<code>npm link</code>命令，并指定模块名：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">src/myProject$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myModule</span></span></code></pre></div><p>上面命令等同于生成了本地模块的符号链接：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">src/myProject/node_modules/myModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/global/node_modules/myModule</span></span></code></pre></div><p>然后，就可以在项目中加载该模块了。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myModule</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;myModule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>这样一来，<code>myModule</code>的任何变化，都可以直接反映在<code>myProject</code>项目之中。如果你的项目不再需要该模块，可以在项目目录内使用<code>npm unlink</code>命令，删除符号链接。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">src/myProject$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> unlink</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myModule</span></span></code></pre></div><h4 id="风险" tabindex="-1">风险 <a class="header-anchor" href="#风险" aria-label="Permalink to &quot;风险&quot;">​</a></h4><p>任何在<code>myProject</code>目录中对<code>myModule</code>的修改，都会反映到模块的源码中。</p><h3 id="打包成压缩包-npm-pack" tabindex="-1">打包成压缩包（npm pack） <a class="header-anchor" href="#打包成压缩包-npm-pack" aria-label="Permalink to &quot;打包成压缩包（npm pack）&quot;">​</a></h3><p><code>npm pack</code>命令是 npm 提供的一个用于将当前项目打包成压缩包（.tgz文件）的命令。</p><p>执行<code>npm pack</code>命令时，npm 会根据当前项目的<code>package.json</code>文件中的配置信息，将项目的文件和依赖项打包成一个压缩包。该压缩包可以用于发布、共享或者在其他项目中安装使用。</p><p>打包生成的压缩包的命名规则为<code>&lt;package-name&gt;-&lt;package-version&gt;.tgz</code>，其中<code>&lt;package-name&gt;</code>是项目的名称，<code>&lt;package-version&gt;</code>是项目的版本号。</p><p><code>npm pack</code>命令的使用非常简单，只需要在项目根目录下执行<code>npm pack</code>即可。执行完毕后，会在当前目录下生成一个压缩包文件。</p><p>需要注意的是，执行<code>npm pack</code>命令时，会根据<code>.npmignore</code>文件或<code>.gitignore</code>文件来排除一些不需要打包的文件或目录。如果没有这两个文件，则会默认打包所有文件。</p><h4 id="怎么安装压缩包" tabindex="-1">怎么安装压缩包 <a class="header-anchor" href="#怎么安装压缩包" aria-label="Permalink to &quot;怎么安装压缩包&quot;">​</a></h4><p>通过执行<code>npm install &lt;package-name&gt;.tgz</code>命令，可以将打包生成的压缩包安装到其他项目中，实现项目之间的依赖关系。</p><p>通过执行<code>npm install &lt;package-name&gt;.tgz</code>命令安装 npm 压缩包时，npm 会在当前目录下查找指定名称的压缩包文件（<code>.tgz</code>文件）。如果找到了该文件，npm 会将其下载并安装到当前项目的node_modules目录中。npm安装压缩包的过程如下：</p><ol><li>首先，npm 会检查当前目录下是否存在指定名称的压缩包文件（.tgz文件）。</li><li>如果找到了压缩包文件，npm 会下载该文件并解压缩。</li><li>解压缩后，npm 会将压缩包中的文件复制到当前项目的 node_modules 目录中。</li><li>npm 会根据压缩包中的<code>package.json</code>文件，解析出依赖关系，并安装这些依赖项。</li><li>需要注意的是，执行<code>npm install &lt;package-name&gt;.tgz</code>命令时，需要确保当前目录下存在指定名称的压缩包文件，并且文件名与<code>&lt;package-name&gt;</code>一致。否则，npm 会报错并无法安装压缩包。</li></ol><p>通过这种方式安装压缩包可以方便地在项目中使用本地开发的 npm 包或者共享的压缩包，而无需将其发布到 npm 仓库。</p>`,115),l=[p];function t(h,k,d,o,c,r){return a(),i("div",null,l)}const y=s(e,[["render",t]]);export{F as __pageData,y as default};
