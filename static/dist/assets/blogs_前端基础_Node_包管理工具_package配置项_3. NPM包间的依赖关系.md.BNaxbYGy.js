import{_ as e,c as s,o as n,a4 as i}from"./chunks/framework.BOW58p_D.js";const E=JSON.parse('{"title":"NPM包间的依赖关系","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/前端基础/Node/包管理工具/package配置项/3. NPM包间的依赖关系.md","filePath":"blogs/前端基础/Node/包管理工具/package配置项/3. NPM包间的依赖关系.md"}'),a={name:"blogs/前端基础/Node/包管理工具/package配置项/3. NPM包间的依赖关系.md"},d=i(`<h1 id="npm包间的依赖关系" tabindex="-1">NPM包间的依赖关系 <a class="header-anchor" href="#npm包间的依赖关系" aria-label="Permalink to &quot;NPM包间的依赖关系&quot;">​</a></h1><h2 id="依赖包分类" tabindex="-1">依赖包分类 <a class="header-anchor" href="#依赖包分类" aria-label="Permalink to &quot;依赖包分类&quot;">​</a></h2><p>在<code>node</code>中其实总共有<code>5</code>种依赖：</p><ul><li><strong>dependencies - 生产环境依赖</strong></li><li><strong>devDependencies - 开发环境依赖</strong></li><li><strong>peerDependencies - 兼容（同伴）依赖</strong></li><li><strong>bundledDependencies / bundleDependencies - 打包依赖</strong></li><li><strong>optionalDependencies - 可选（不阻断安装）依赖</strong></li></ul><p>常用的依赖是<code>dependencies</code>和<code>devDependencies</code>，剩下三种依赖则是作为包的发布者才会使用到的字段</p><h2 id="dependencies" tabindex="-1">dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;dependencies&quot;">​</a></h2><p>这种依赖在项目最终上线或者发布<code>npm</code>包时需要，即其中的依赖项 <strong>应该属于线上代码的一部分</strong>。</p><p>比如框架<code>vue</code>，第三方的组件库<code>element-ui</code>等，这些依赖包都是必须装在这个选项里供生产环境使用。</p><p>通过命令<code>npm install packageName --save</code>把包装在此依赖项里：</p><ul><li>如果没有指定版本，直接写一个包的名字，则安装当前<code>npm</code>仓库中这个包的 <strong>最新版本</strong></li><li>如果要指定版本的，可以把版本号写在包名后面，比如<code>npm i vue@3.0.1 -S</code></li></ul><blockquote><p>从<code>npm 5.x</code>开始，可以不用手动添加<code>-S/--save</code>指令，直接执行<code>npm i packageName</code>把依赖包添加到<code>dependencies</code>中去</p></blockquote><h2 id="devdependencies" tabindex="-1">devDependencies <a class="header-anchor" href="#devdependencies" aria-label="Permalink to &quot;devDependencies&quot;">​</a></h2><p>这种依赖只在项目开发时需要，即其中的依赖项 <strong>不应该属于线上代码的一部分</strong>。</p><p>比如构建工具<code>webpack</code>、<code>gulp</code>，预处理器<code>babel-loader</code>、<code>scss-loader</code>等这些都是辅助开发的工具包，无须在生产环境使用。</p><p>通过命令<code>npm install--save-dev</code>把包安装成开发依赖。</p><p>如果想缩减安装包，可以使用命令<code>npm i --production</code>忽略开发依赖，只安装基本依赖，这通常在线上机器（或者测试环境）上使用。</p><blockquote><p><strong>千万别以为只有在<code>dependencies</code>中的模块才会被一起打包，而在<code>devDependencies</code>中的不会！模块能否被打包，取决于项目里是否被引入了该模块！</strong></p></blockquote><ul><li>在业务项目中<code>dependencies</code>和<code>devDependencies</code>没有什么本质区别，只是单纯的一个 <strong>规范作用</strong>，在执行<code>npm i</code>时两个依赖下的模块都会被下载。</li><li>而在发布<code>npm</code>包的时候，包中的<code>dependencies</code>依赖项在安装该包的时候会被一起下载，<code>devDependencies</code>依赖项则不会。</li></ul><h2 id="peerdependencies" tabindex="-1">peerDependencies <a class="header-anchor" href="#peerdependencies" aria-label="Permalink to &quot;peerDependencies&quot;">​</a></h2><p>这种依赖的作用是提示宿主环境去安装插件在<code>peerDependencies</code>中所指定的依赖包，插件所依赖的包永远都是宿主环境统一安装的<code>npm</code>包。这样做的目的是可以避免插件和宿主因为包版本问题重复安装同一个包。</p><p><code>element-ui@2.6.3</code>只是提供一套基于<code>vue</code>的ui组件库，但它要求宿主环境需要安装指定的<code>vue</code>版本，所以你可以看到<code>element</code>项目中的<code>package.json</code>中具有一项配置：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;peerDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.5.16&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>它要求宿主环境安装<code>3.0.0 &gt; vue@ &gt;= 2.5.16</code>的版本，也就是<code>element-ui</code>的运行，依赖宿主环境提供的<code>3.0.0 ~ 2.5.16</code>版本的<code>vue</code>。</p><blockquote><p>大白话：如果你安装我，那么你最好也要按照我的要求安装A、B和C。</p></blockquote><h2 id="bundleddependencies-bundledependencies" tabindex="-1">bundledDependencies / bundleDependencies <a class="header-anchor" href="#bundleddependencies-bundledependencies" aria-label="Permalink to &quot;bundledDependencies / bundleDependencies&quot;">​</a></h2><p>这种依赖跟<code>npm pack</code>打包命令有关。假设<code>package.json</code>中有如下配置：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font-end&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;fe1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^0.3.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;fe2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;bundledDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;fe1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;fe2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>执行打包命令<code>npm pack</code>时，会生成<code>front-end-1.0.0.tgz</code>压缩包，并且该压缩包中包含<code>fe1</code>和<code>fe2</code>两个安装包。</p><p>这样使用者执行<code>npm install front-end-1.0.0.tgz</code>时也会安装这两个依赖</p><blockquote><p>在<code>bundledDependencies</code>中指定的依赖包，必须先在<code>dependencies</code>和<code>devDependencies</code>声明过，否则打包会报错。</p></blockquote><h2 id="optionaldependencies" tabindex="-1">optionalDependencies <a class="header-anchor" href="#optionaldependencies" aria-label="Permalink to &quot;optionalDependencies&quot;">​</a></h2><p>如果需要在找不到包或者安装包失败时，npm仍然能够继续运行，则可以将该包放在<code>optionalDependencies</code>对象中。</p><p><code>optionalDependencies</code>对象中的包会覆盖<code>dependencies</code>中同名的包，所以只需在一个地方进行设置即可。</p><p>在实际项目中，如果某个包已经失效，我们通常会寻找它的替代者，或者换一个实现方案。不确定的依赖会增加代码判断和测试难度，所以这个依赖项还是 <strong>尽量不要使用</strong>。</p>`,34),p=[d];function o(c,t,l,h,k,r){return n(),s("div",null,p)}const g=e(a,[["render",o]]);export{E as __pageData,g as default};
