import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.BOW58p_D.js";const g=JSON.parse('{"title":"npm scripts 脚本","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/前端基础/Node/包管理工具/package配置项/2. npm scripts 脚本工作原理.md","filePath":"blogs/前端基础/Node/包管理工具/package配置项/2. npm scripts 脚本工作原理.md"}'),e={name:"blogs/前端基础/Node/包管理工具/package配置项/2. npm scripts 脚本工作原理.md"},p=n(`<h1 id="npm-scripts-脚本" tabindex="-1">npm scripts 脚本 <a class="header-anchor" href="#npm-scripts-脚本" aria-label="Permalink to &quot;npm scripts 脚本&quot;">​</a></h1><p><code>package.json</code>中的<code>scripts</code>字段可以用来自定义脚本命令，它的每一个属性，对应一段脚本。</p><p>以<code>vue-cli3</code>为例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;serve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue-cli-service serve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样就可以通过<code>npm run serve</code>脚本代替<code>vue-cli-service serve</code>脚本来启动项目，而无需每次敲一遍这么冗长的脚本。</p><blockquote><p><code>npm run</code>是<code>npm run-script</code>的缩写，一般都使用前者，但是后者可以更好地反应这个命令的本质。</p></blockquote><h2 id="指令钩子" tabindex="-1">指令钩子 <a class="header-anchor" href="#指令钩子" aria-label="Permalink to &quot;指令钩子&quot;">​</a></h2><p>在执行<code>npm scripts</code>命令（无论是自定义还是内置）时，都经历了<code>pre</code>和<code>post</code>两个钩子，在这两个钩子中可以定义某个命令执行前后的命令</p><p>比如在执行<code>npm run serve</code>命令时，会依次执行<code>npm run preserve</code>、<code>npm run serve</code>、<code>npm run postserve</code>，所以可以在这两个钩子中自定义一些动作：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;preserve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxxxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;serve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue-cli-service serve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;postserve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxxxxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当然，如果没有指定<code>preserve</code>、<code>postserve</code>，会跳过。如果想要指定钩子，必须严格按照<code>pre</code>和<code>post</code>前缀来添加。</p><p>环境变量<code>process.env.npm_lifecycle_event</code>可以配合钩子来一起使用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> event</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.env.npm_lifecycle_event</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;preserve&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Running the preserve task!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;serve&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Running the serve task!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="多命令运行" tabindex="-1">多命令运行 <a class="header-anchor" href="#多命令运行" aria-label="Permalink to &quot;多命令运行&quot;">​</a></h2><p>有的项目在启动时可能需要同时执行多个任务，多个任务的执行顺序决定了项目的表现。</p><h3 id="串行执行" tabindex="-1">串行执行 <a class="header-anchor" href="#串行执行" aria-label="Permalink to &quot;串行执行&quot;">​</a></h3><p>串行执行，要求前一个任务执行成功以后才能执行下一个任务，使用<code>&amp;&amp;</code>符号来连接</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script2</span></span></code></pre></div><blockquote><p>串行命令执行过程中，只要一个命令执行失败，则整个脚本终止</p></blockquote><h3 id="并行执行" tabindex="-1">并行执行 <a class="header-anchor" href="#并行执行" aria-label="Permalink to &quot;并行执行&quot;">​</a></h3><p>并行执行，就是多个命令可以同时的平行执行，使用<code>&amp;</code>符号来连接</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script2</span></span></code></pre></div><h2 id="npm-命令行参数" tabindex="-1">NPM 命令行参数 <a class="header-anchor" href="#npm-命令行参数" aria-label="Permalink to &quot;NPM 命令行参数&quot;">​</a></h2><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;serve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue-cli-service serve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;serve1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue-cli-service --serve1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;serve2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue-cli-service -serve2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;serve3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vue-cli-service serve --mode=dev --mobile -config build/example.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>除了第一个可执行的命令，以空格分割的任何字符串（除了一些 shell 的语法）都是参数，并且都能通过<code>process.argv</code>属性访问</strong></p><h3 id="获取参数" tabindex="-1">获取参数 <a class="header-anchor" href="#获取参数" aria-label="Permalink to &quot;获取参数&quot;">​</a></h3><p>通过<code>process.argv</code>，可以获取当 Node.js 进程被启动时传入的命令行参数。该属性返回一个数组。</p><p>这个数组包含了启动 Node.js 进程时的命令行参数：</p><ul><li>第一个元素为启动 Node.js 进程的可执行文件的绝对路径名<code>process.execPath</code></li><li>第二个元素为当前执行的 JavaScript 文件路径</li><li>剩余的元素为其他命令行参数</li></ul><p>比如执行<code>npm run serve3</code>命令，<code>process.argv</code>的具体内容为：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[ </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;/usr/local/Cellar/node/7.7.1_1/bin/node&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;/Users/mac/Vue-projects/hao-cli/node_modules/.bin/vue-cli-service&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;serve&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;--mode=dev&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;--mobile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;-config&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;build/example.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h4 id="格式化命令参数-minimist" tabindex="-1">格式化命令参数（minimist） <a class="header-anchor" href="#格式化命令参数-minimist" aria-label="Permalink to &quot;格式化命令参数（minimist）&quot;">​</a></h4><p>很多命令行之所以这么写，都是依赖了<code>minimist</code>或者<code>yargs</code>等参数解析工具来对命令行参数进行解析。</p><p>以<code>minimist</code>对<code>vue-cli-service serve --mode=dev --mobile -config build/example.js</code>解析为例，解析后的结果为：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  _</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;serve&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dev&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mobile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;build/example.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;$0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/Users/mac/Vue-projects/hao-cli/node_modules/.bin/vue-cli-service&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在<code>./node_modules/.bin/vue-cli-service</code>文件中可以看到<code>minimist</code>对命令行参数的处理：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rawArgv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.argv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;minimist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(rawArgv, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  boolean: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // build</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;modern&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;report&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;report-json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;watch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // serve</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;open&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;copy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;https&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // inspect</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;verbose&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> command</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args._[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(command, args, rawArgv).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(err)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="通过命令行传参" tabindex="-1">通过命令行传参 <a class="header-anchor" href="#通过命令行传参" aria-label="Permalink to &quot;通过命令行传参&quot;">​</a></h3><h4 id="npm-run-xxx-参数" tabindex="-1"><code>npm run xxx [参数]</code> <a class="header-anchor" href="#npm-run-xxx-参数" aria-label="Permalink to &quot;\`npm run xxx [参数]\`&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 给命令传参（给 process.argv 添加属性）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port=8080</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 实际运行的命令是 vue-cli-service serve --port=8080</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果参数不是通过 -- --x=y 这种方式，而是直接 --x=y，表示的是添加环境变量。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问方式 process.env.npm_config_mode</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --mode</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问方式 process.env.npm_config_params</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --params=123</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等同于 --params 参数，访问方式 process.env.npm_config_params</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -params</span></span></code></pre></div><h4 id="参数-npm-run-xxx" tabindex="-1"><code>[参数] npm run xxx</code> <a class="header-anchor" href="#参数-npm-run-xxx" aria-label="Permalink to &quot;\`[参数] npm run xxx\`&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 给 process.env 添加属性。访问方式 process.env.test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;build&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test=true vue-cli-service serve&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问方式 process.env.test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> server</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 访问方式 process.env.npm_config_params</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm_config_params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span></span></code></pre></div><ul><li><code>npm run serve --params=123</code>这是给当前项目的环境对象添加属性，而不是给<code>vue-cli-service dev</code>传递参数。</li><li>如果是<code>vue-cli-service dev --mode=dev</code>，则是给<code>vue-cli-service dev</code>传递参数。</li></ul><blockquote><p><code>process.env</code>属性会返回一个对象，这个对象包含项目的环境信息；<strong>以<code>npm_config_</code>为前缀的环境变量将会被认为是<code>npm</code>的配置属性</strong></p></blockquote><h2 id="npm-scripts-中的命令是怎么注册和执行的" tabindex="-1">npm scripts 中的命令是怎么注册和执行的 <a class="header-anchor" href="#npm-scripts-中的命令是怎么注册和执行的" aria-label="Permalink to &quot;npm scripts 中的命令是怎么注册和执行的&quot;">​</a></h2><h3 id="软链接" tabindex="-1">软链接 <a class="header-anchor" href="#软链接" aria-label="Permalink to &quot;软链接&quot;">​</a></h3><p>软链接（符号链接）是一类特殊的可执行文件，<strong>包含指定文件的路径引用</strong>，类似于桌面的快捷打开方式。</p><p>用<code>webpack</code>举例，<code>npm</code>会在项目中的<code>node_modules/.bin</code>目录下创建一条软链接，点击这个文件，就会链接到 webpack 依赖包的<code>package.json</code>文件的<code>bin</code>字段中定义的<code>webpack.js</code>文件。</p><p><strong>在对链接文件进行读或写操作的时候，系统会自动把该操作转换为对源文件的操作，但删除链接文件时，系统仅仅删除链接文件，而不删除源文件本身</strong>。</p><h3 id="package-json-中的-bin-字段" tabindex="-1">package.json 中的 bin 字段 <a class="header-anchor" href="#package-json-中的-bin-字段" aria-label="Permalink to &quot;package.json 中的 bin 字段&quot;">​</a></h3><p>作用：在<code>./node_modules/.bin</code>中注册可执行文件（软链接）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;vue-cli-service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bin/vue-cli-service.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>初始化的时候<code>npm</code>会将<code>bin</code>中的属性名链接到<code>/usr/local/bin/</code>（全局初始化）或者<code>./node_modules/.bin/</code>（本地初始化）目录下。</p><p>软链接的文件名是<code>package.json</code>中<code>bin</code>的属性名，链接到的文件就是<code>bin</code>字段对应属性名的文件。</p><h4 id="查看当前项目的-bin-目录" tabindex="-1">查看当前项目的 bin 目录 <a class="header-anchor" href="#查看当前项目的-bin-目录" aria-label="Permalink to &quot;查看当前项目的 bin 目录&quot;">​</a></h4><p>通过<code>npm bin</code>指令显示当前项目的<code>bin</code>目录的路径</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /xxx/xxx/xxx/xxx/xxx/node_modules/.bin</span></span></code></pre></div><h4 id="全局安装" tabindex="-1">全局安装 <a class="header-anchor" href="#全局安装" aria-label="Permalink to &quot;全局安装&quot;">​</a></h4><p>如果全局安装<code>@vue/cli</code>的话，<code>@vue/cli</code>源文件会被安装在全局源文件目录下（<code>/usr/local/lib/node_modules</code>）。</p><p>而<code>npm</code>会在全局<code>bin</code>（<code>/usr/local/bin</code>）文件夹下创建一个文件的名为<code>vue</code>的软链接，并指向<code>/usr/local/lib/node_modules/@vue/cli/bin/vue.js</code>。这样就可以直接在终端输入<code>vue</code>来执行相关命令。</p><h4 id="项目内安装" tabindex="-1">项目内安装 <a class="header-anchor" href="#项目内安装" aria-label="Permalink to &quot;项目内安装&quot;">​</a></h4><p>如果局部安装<code>@vue/cli</code>的话，<code>npm</code>则会在本地项目<code>./node_modules/.bin</code>目录下创建一个名为vue的软链接，并指向<code>./node_moudles/@vue/cli/bin/vue.js</code>。</p><p>这个时候需要在终端中输入<code>./node_modules/.bin/vue</code>来执行，也可以使用<code>npx vue</code>命令来执行：</p><ul><li><code>npx</code>的作用就是为了方便调用项目内部安装的模块</li></ul><h3 id="path-环境变量" tabindex="-1">PATH 环境变量 <a class="header-anchor" href="#path-环境变量" aria-label="Permalink to &quot;PATH 环境变量&quot;">​</a></h3><blockquote><p><code>PATH</code>环境变量，是告诉系统，当要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统除了在当前目录下面寻找此程序外，还应到哪些目录下去寻找。</p></blockquote><p>在<code>terminal</code>中执行命令时，命令 <strong>会在<code>PATH</code>环境变量中包含的路径里面去寻找相同名字的可执行文件</strong>。</p><h4 id="为什么局部安装的文件直接在-terminal-中输入会报无法找到的错误" tabindex="-1">为什么局部安装的文件直接在 terminal 中输入会报无法找到的错误 <a class="header-anchor" href="#为什么局部安装的文件直接在-terminal-中输入会报无法找到的错误" aria-label="Permalink to &quot;为什么局部安装的文件直接在 terminal 中输入会报无法找到的错误&quot;">​</a></h4><p>局部安装的包只在<code>./node_modules/.bin</code>中注册了它们的可执行文件，不会被包含在<code>PATH</code>环境变量中，这个时候在<code>terminal</code>中输入命令将会报无法找到的错误</p><h4 id="那为什么通过npm-run可以执行局部安装的命令行包呢" tabindex="-1">那为什么通过npm run可以执行局部安装的命令行包呢 <a class="header-anchor" href="#那为什么通过npm-run可以执行局部安装的命令行包呢" aria-label="Permalink to &quot;那为什么通过npm run可以执行局部安装的命令行包呢&quot;">​</a></h4><p>每当执行<code>npm run</code>时，会自动新建一个Shell（一般是 Bash），这个 Shell 会将当前项目的<code>node_modules/.bin</code>的绝对路径加入到环境变量<code>PATH</code>中，执行结束后，再将环境变量<code>PATH</code>恢复原样。</p><p>即 通过<code>npm run</code>可以在不添加路径前缀的情况下直接访问当前项目<code>node_modules/.bin</code>目录里面的可执行文件。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>当我们使用<code>npm</code>或者<code>yarn</code>命令安装包时，如果该包的<code>package.json</code>文件有<code>bin</code>字段，就会在<code>node_modules</code>文件夹下面的<code>.bin</code>目录中添加软链接。</p><p>而当我们使用<code>npm run 命令名</code>时，<code>npm run</code>会修改环境变量以找到对应的可执行文件，此时可以省略路径直接使用命令执行。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scripts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./node_modules/bin/someTool.js build&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 简写为</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scripts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;someTool build&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,76),l=[p];function h(t,k,d,r,o,c){return a(),i("div",null,l)}const F=s(e,[["render",h]]);export{g as __pageData,F as default};
