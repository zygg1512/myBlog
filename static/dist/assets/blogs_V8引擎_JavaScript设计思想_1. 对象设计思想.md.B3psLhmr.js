import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.BOW58p_D.js";const c=JSON.parse('{"title":"对象设计思想","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/V8引擎/JavaScript设计思想/1. 对象设计思想.md","filePath":"blogs/V8引擎/JavaScript设计思想/1. 对象设计思想.md"}'),p={name:"blogs/V8引擎/JavaScript设计思想/1. 对象设计思想.md"},t=n(`<h1 id="对象设计思想" tabindex="-1">对象设计思想 <a class="header-anchor" href="#对象设计思想" aria-label="Permalink to &quot;对象设计思想&quot;">​</a></h1><h2 id="v8-中对象的结构" tabindex="-1">V8 中对象的结构 <a class="header-anchor" href="#v8-中对象的结构" aria-label="Permalink to &quot;V8 中对象的结构&quot;">​</a></h2><p>在 V8 中，对象主要由四个指针构成，分别是：</p><ul><li><code>map</code>（隐藏类 Hidden Class）：用于描述对象的结构</li><li><code>properties</code>：存放对象的常规属性</li><li><code>elements</code>：存放对象的排序属性</li><li><code>__proto__</code>：存放对象的原型</li></ul><h2 id="对象的两种属性类型" tabindex="-1">对象的两种属性类型 <a class="header-anchor" href="#对象的两种属性类型" aria-label="Permalink to &quot;对象的两种属性类型&quot;">​</a></h2><p>对象的属性主要分为两种类型：</p><ul><li>排序属性（elements）：把对象中的数字属性称为排序属性，在 V8 中被称为<code>elements</code></li><li>常规属性（properties）：把对象中的字符串属性称为常规属性，在 V8 中被称为<code>properties</code></li></ul><h3 id="两种属性类型的获取顺序" tabindex="-1">两种属性类型的获取顺序 <a class="header-anchor" href="#两种属性类型的获取顺序" aria-label="Permalink to &quot;两种属性类型的获取顺序&quot;">​</a></h3><p>在 ECMAScript 规范中定义了：获取对象属性时，<strong>数字属性应该按照索引值大小升序排列，字符串属性根据创建时的顺序升序排列。</strong> 且数字属性的打印顺序优于字符串属性。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-100&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-1&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bar-B&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-50&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;test-9&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-8&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-3&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-5&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bar-A&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bar-C&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`index:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}  value:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>执行后输入如下：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>index:1  value:test-1</span></span>
<span class="line"><span>index:3  value:test-3</span></span>
<span class="line"><span>index:5  value:test-5</span></span>
<span class="line"><span>index:8  value:test-8</span></span>
<span class="line"><span>index:9  value:test-9</span></span>
<span class="line"><span>index:50  value:test-50</span></span>
<span class="line"><span>index:100  value:test-100</span></span>
<span class="line"><span>index:B  value:bar-B</span></span>
<span class="line"><span>index:A  value:bar-A</span></span>
<span class="line"><span>index:C  value:bar-C</span></span></code></pre></div><p>观察这段打印出来的数据，发现打印出来的属性顺序并不是设置的顺序，设置属性的时候是乱序设置的，比如开始先设置 100，然后又设置了 1，但是输出的内容却非常规律，总的来说体现在以下两点：</p><ul><li>设置的数字属性被最先打印出来了，并且是按照数字大小的顺序打印的。</li><li>设置的字符串属性依然是按照之前的设置顺序打印的，比如我们是按照 B、A、C 的顺序设置的，打印出来依然是这个顺序。</li></ul><h3 id="排序属性-elements-的存储方式" tabindex="-1">排序属性（elements）的存储方式 <a class="header-anchor" href="#排序属性-elements-的存储方式" aria-label="Permalink to &quot;排序属性（elements）的存储方式&quot;">​</a></h3><p>elements 默认应该采用连续的存储结构，通过浪费空间换取时间，直接下标访问，提升访问速度。</p><p>但当 elements的序号十分不连续时，会优化成为字典结构。在上面的代码中再加入一行。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1111</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-1111&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-100&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-1&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-50&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;test-9&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-8&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-3&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test-5&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`index:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}  value:\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>执行后输入如下：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>index:1  value:test-1</span></span>
<span class="line"><span>index:3  value:test-3</span></span>
<span class="line"><span>index:5  value:test-5</span></span>
<span class="line"><span>index:8  value:test-8</span></span>
<span class="line"><span>index:9  value:test-9</span></span>
<span class="line"><span>index:50  value:test-50</span></span>
<span class="line"><span>index:100  value:test-100</span></span>
<span class="line"><span>index:1111  value:test-1111</span></span></code></pre></div><p>此时 elements 中的数据存放也变得没有规律了。但是依然会按索引升序打印对象属性。</p><p>这是因为，当添加了<code>bar[1111]</code>之后，数组会变成稀疏数组。elements 的序号十分不连续时会转换为字典存储的方式，而不再是用一个完整的数组描述这块空间的存储。所以，这几个可索引属性也不能再直接通过它的索引值计算出属性值在内存中的偏移量。</p><img src="https://gitee.com/CwdyBic/myBlog/raw/master/assets/V8引擎/elements字典存储.png" height="400px"><h3 id="常规属性-properties-的存储方式" tabindex="-1">常规属性（properties）的存储方式 <a class="header-anchor" href="#常规属性-properties-的存储方式" aria-label="Permalink to &quot;常规属性（properties）的存储方式&quot;">​</a></h3><p>V8 中命名属性有三种的不同存储方式：对象内属性（in-object）、快属性（fast）和慢属性（slow）。</p><h4 id="快属性-fast-和慢属性-slow" tabindex="-1">快属性（fast）和慢属性（slow） <a class="header-anchor" href="#快属性-fast-和慢属性-slow" aria-label="Permalink to &quot;快属性（fast）和慢属性（slow）&quot;">​</a></h4><p>properties 默认采用链表结构，当数据量很小时，查找也会很快，但数据量上升到某个数值后，会优化成为字典数据结构。因为超过某个数值，顺序查找就不够快了，就需要通过字典结构查找，以提升速度。因此：</p><ul><li><strong>将采用链表结构存储的属性称之为“快属性”。</strong> 因为线性数据结构中只需要通过索引即可以访问到属性。</li><li><strong>将采用字典结构存储的属性称之为“慢属性”。</strong> 如果一个对象的属性过多时，V8 就会采取字典结构存储属性。所有的属性元信息不再是线性存储的，而是直接保存在属性字典中。</li></ul><h4 id="对象内属性-in-object-properties" tabindex="-1">对象内属性 (in-object properties) <a class="header-anchor" href="#对象内属性-in-object-properties" aria-label="Permalink to &quot;对象内属性 (in-object properties)&quot;">​</a></h4><p>将不同的属性分别保存到 elements 属性和 properties 属性中，无疑简化了程序的复杂度，但是在查找元素时，却多了一步操作，比如执行<code>bar.B</code>这个语句来查找 B 的属性值，那么在 V8 会先查找出 properties 属性所指向的 properties 对象，然后再在 properties 对象中查找 B 属性，这种方式在查找过程中增加了一步操作，因此会影响到元素的查找效率。</p><p>基于这个原因，V8 采取了一个权衡的策略以加快查找属性的效率，这个策略是<strong>将所有常规属性名直接存储到对象本身，部分属性值也存储到对象本身，其余属性值通过指针、索引存储到 properties 中，我们把属性值存储到对象本身的属性称为对象内属性 (in-object properties)。</strong></p><p>采用对象内属性之后，常规属性就被保存到<code>bar</code>对象本身了，这样当再次使用<code>bar.B</code>来查找 B 的属性值时，V8 就可以直接从<code>bar</code>对象本身去获取该值就可以了，这种方式减少查找属性值的步骤，增加了查找效率。</p><p>当然对象内属性也有大小限制，规则如下：</p><ul><li>当对象属性较少时，对象内属性的数量是固定的，默认是 10 个，如果添加的属性超出了对象分配的空间，则它们的属性值以快属性的方式存储在 properties 中。虽然属性存储多了一层间接层，但可以自由地扩容。</li><li>当对象属性较多时，不再使用对象内属性，对象内所有属性值都会通过慢属性方式存储到 properties 中。</li></ul><p>如下代码，a、b 和 c 分别拥有 10 个，12 个和 30 个属性，在目前的 Chrome 73 版本中，分别会以对象内属性、对象内属性 + 快属性、慢属性三种方式存储。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对象内属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`key-a\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`value-a\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对象内属性 + 快属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`key-b\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`value-b\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 慢属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  c[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`key-c\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`value-c\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>执行后快照如下：</p><p><strong>对象内属性 + 快属性</strong></p><p>首先看一下 a 和 b。</p><img src="https://gitee.com/CwdyBic/myBlog/raw/master/assets/V8引擎/对象内属性存储.png" height="300px"><img src="https://gitee.com/CwdyBic/myBlog/raw/master/assets/V8引擎/快属性存储.png" height="300px"><p>从某种程度上讲，对象内属性和快属性实际上是一致的。只不过，对象内属性是在对象创建时就固定分配的，空间有限。默认情况下，对象内属性的数量固定为十个，且这十个空间大小相同。当对象内属性放满之后，会以快属性的方式，在 properties 下按创建顺序存放。相较于对象内属性，快属性需要额外多一次 properties 的寻址时间，之后便是与对象内属性一致的线性查找。</p><p><strong>慢属性</strong></p><img src="https://gitee.com/CwdyBic/myBlog/raw/master/assets/V8引擎/慢属性.png" height="300px"><p>可以看到，和 b（快属性）相比，properties 中的索引变成了毫无规律的数，意味着这个对象已经变成了字典存取结构了。</p><h4 id="三种属性的区别" tabindex="-1">三种属性的区别 <a class="header-anchor" href="#三种属性的区别" aria-label="Permalink to &quot;三种属性的区别&quot;">​</a></h4><img src="https://gitee.com/CwdyBic/myBlog/raw/master/assets/V8引擎/常规属性的不同存储方式.png" height="300px"><ul><li>对象内属性和快属性都是以链表的方式存储在对象本身。其中对象内属性提供最快的访问速度。快属性比对象内属性多了一次寻址时间。 <ul><li>基于链表的线性查找，这部分的耗时可以理解为至多 N 次简单位运算（N 为属性的总数）的耗时。</li></ul></li><li>慢属性与前面的两种属性相比，慢属性通过字典方式存储，查询速度最慢。查找方式采用哈希查找。首先通过哈希算法计算属性名的Hash映射，得到对应的 index，然后需要顺着 index 对应的链表的头节点，一个一个向下来查找。 <ul><li>哈希算法是一个复杂运算，时间上若干倍于简单位运算。另外，哈希表是个二维空间，所以需要先通过哈希算法计算出其中一维的坐标后，再在另一维上仍需要线性查找。</li><li>具体查找原理参考：<a href="https://juejin.cn/post/6844903518264885256" target="_blank" rel="noreferrer">漫画：什么是HashMap？</a></li></ul></li></ul><p>哈希数据存储如下图：</p><img src="https://gitee.com/CwdyBic/myBlog/raw/master/assets/V8引擎/哈希数据存储.webp" height="300px"><h2 id="隐藏类-map" tabindex="-1">隐藏类（map） <a class="header-anchor" href="#隐藏类-map" aria-label="Permalink to &quot;隐藏类（map）&quot;">​</a></h2><h3 id="什么是隐藏类" tabindex="-1">什么是隐藏类 <a class="header-anchor" href="#什么是隐藏类" aria-label="Permalink to &quot;什么是隐藏类&quot;">​</a></h3><p>V8 会为每个对象创建一个隐藏类，对象的隐藏类中记录了该对象一些基础的布局信息，包括以下两点：</p><ul><li>对象中包含的所有属性。</li><li>每个属性相对于对象的偏移量。</li></ul><h3 id="隐藏类的作用" tabindex="-1">隐藏类的作用 <a class="header-anchor" href="#隐藏类的作用" aria-label="Permalink to &quot;隐藏类的作用&quot;">​</a></h3><p>隐藏类主要有两个作用：</p><h4 id="提升访问对象属性值速度" tabindex="-1">提升访问对象属性值速度 <a class="header-anchor" href="#提升访问对象属性值速度" aria-label="Permalink to &quot;提升访问对象属性值速度&quot;">​</a></h4><ul><li>有了隐藏类之后，那么当 V8 访问某个对象中的某个属性时，就会先去隐藏类中查找该属性相对于对象的偏移量，有了偏移量和属性类型，V8 就可以直接去内存中取出对应的属性值，而不需要经历一系列的查找过程。这就大大提升了 V8 查找对象的效率。</li></ul><p>结合一段代码来分析下隐藏类是怎么工作的：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {x:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,y:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当 V8 执行到这段代码时，会先为 point 对象创建一个隐藏类，在 V8 中，把隐藏类又称为 map，每个对象都有一个 map 属性，其值指向内存中的隐藏类。</p><p>隐藏类主要包括了属性名称和每个属性所对应的偏移量，比如 point 对象的隐藏类就包括了 x 和 y 属性，x 的偏移量是 4，y 的偏移量是 8。</p><img src="https://gitee.com/CwdyBic/myBlog/raw/master/assets/V8引擎/隐藏类示例.webp" height="300px"><p>有了 map 之后，当你再次使用 point.x 访问 x 属性时，V8 会查询 point 的 map 中 x 属性相对 point 对象的偏移量，然后将 point 对象的起始位置加上偏移量，就得到了 x 属性的值在内存中的位置，有了这个位置也就拿到了 x 的值，这样我们就省去了一个比较复杂的查找过程。</p><p>这就是将动态语言静态化的一个操作，V8 通过引入隐藏类，模拟 C++ 这种静态语言的机制，从而达到静态语言的执行效率。</p><h4 id="节省了内存空间" tabindex="-1">节省了内存空间 <a class="header-anchor" href="#节省了内存空间" aria-label="Permalink to &quot;节省了内存空间&quot;">​</a></h4><p>在 ECMAScript 中，对象属性的 Attribute 被描述为以下结构。</p><ul><li><code>[[Value]]</code>：属性的值</li><li><code>[[Writable]]</code>：定义属性是否可写（即是否能被重新分配）</li><li><code>[[Enumerable]]</code>：定义属性是否可枚举</li><li><code>[[Configurable]]</code>：定义属性是否可配置</li></ul><p>隐藏类的引入，将属性的<code>[[Value]]</code>与其它 Attribute 分开。一般情况下，对象的<code>[[Value]]</code>是经常会发生变动的，而 Attribute 是几乎不怎么会变的。对于这些不怎么变的 Attribute 就不需要额外存储在<code>properties</code>和<code>elements</code>中了。</p><h3 id="复用隐藏类" tabindex="-1">复用隐藏类 <a class="header-anchor" href="#复用隐藏类" aria-label="Permalink to &quot;复用隐藏类&quot;">​</a></h3><p>如果两个对象的形状是相同的，V8 就会为其复用同一个隐藏类，这样有两个好处：</p><ul><li>减少隐藏类的创建次数，也间接加速了代码的执行速度。</li><li>减少了隐藏类的存储空间。</li></ul><p>如果要两个对象的形状是相同的，要满足<strong>从相同的起点，以相同的顺序，添加结构相同的属性（除 Value 外，属性的 Attribute 一致）。</strong></p><p>例子一：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {x:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,y:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> point2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {x:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,y:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>当 V8 执行到这段代码时，首先会为 point 对象创建一个隐藏类，然后继续创建 point2 对象。在创建 point2 对象的过程中，发现它的形状和 point 是一样的。这时候，V8 就会将 point 的隐藏类给 point2 复用，具体效果可以参看下图：</p><img src="https://gitee.com/CwdyBic/myBlog/raw/master/assets/V8引擎/复用隐藏类示例.webp" height="300px"><p>例子二：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> point2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>此时 point 和 point2 对象的隐藏类不一样，<code>back_pointer</code>也不一样。这主要是因为在创建 b 的隐藏类时，省略了为空对象单独创建隐藏类的一步。</p><h3 id="重新构建隐藏类" tabindex="-1">重新构建隐藏类 <a class="header-anchor" href="#重新构建隐藏类" aria-label="Permalink to &quot;重新构建隐藏类&quot;">​</a></h3><p>当给一个对象添加属性、删除属性或者改变某个属性的数据类型时，都会改变这个对象的形状，那么势必会触发 V8 为改变形状后的对象重建新的隐藏类。</p><h4 id="添加属性" tabindex="-1">添加属性 <a class="header-anchor" href="#添加属性" aria-label="Permalink to &quot;添加属性&quot;">​</a></h4><p>下面的例子中，point 在空对象时、添加 x 属性和 y 属性后会分别对应不同的隐藏类。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">point.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">point.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>下面是创建过程的示意图：</p><img src="https://gitee.com/CwdyBic/myBlog/raw/master/assets/V8引擎/隐藏类添加属性.png" height="300px"><p>可以看到，Hidden Class 1 和 Hidden Class2 是不同的，并且后者的<code>back_pointer</code>指针指向前者。</p><p>也就是说在实际存储中，每次添加属性时，新创建隐藏类实际上只会描述这个新添加的属性，而不会描述所有属性，也就是 Hidden Class 2 中实际上只会描述<code>y</code>，没有<code>x</code>。</p><h4 id="删除属性" tabindex="-1">删除属性 <a class="header-anchor" href="#删除属性" aria-label="Permalink to &quot;删除属性&quot;">​</a></h4><p>删除了对象的某个属性，那么对象的形状也就随着发生了改变，这时 V8 也会重建该对象的隐藏类，并且属性的存储方式会变成慢属性。</p><p>可以看下面这样的一个例子：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {x:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,y:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> point.x</span></span></code></pre></div><p>不同阶段的 point 隐藏类如下：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 1. 新建 point 对象</span></span>
<span class="line"><span> - map: @167363</span></span>
<span class="line"><span> - x: &quot;100&quot;</span></span>
<span class="line"><span> - y: &quot;200&quot;</span></span>
<span class="line"><span> -...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 2. 删除 x 属性后，重新构建了新的隐藏类</span></span>
<span class="line"><span> - map: @258323</span></span>
<span class="line"><span> - y: &quot;200&quot; @31449</span></span>
<span class="line"><span> - ...</span></span>
<span class="line"><span> - properties: @258321 {</span></span>
<span class="line"><span>    24: &quot;200&quot; @31449</span></span>
<span class="line"><span>    102: &quot;y&quot; @11901</span></span>
<span class="line"><span> }</span></span></code></pre></div><p>不仅如此，删除了属性<code>x</code>之后，<code>point</code>对象的属性从对象内属性变成了慢属性。</p><h2 id="原型-proto" tabindex="-1">原型（<code>__proto__</code>） <a class="header-anchor" href="#原型-proto" aria-label="Permalink to &quot;原型（\`__proto__\`）&quot;">​</a></h2><p>V8 为每个对象都设置了一个<code>__proto__</code>属性，该属性指向了创建该对象的构造函数的原型对象。原型对象也有自己的<code>__proto__</code>属性，这些属性串连在一起就成了原型链。</p><p>所有对象的<code>__proto__</code>属性最终指向<code>Object.prototype.__proto__</code>，<code>Object.prototype.__proto__</code>为<code>null</code>。而<code>Function.prototype.__proto__</code>指向<code>Object.prototype</code>。</p><p>在 JavaScript 中，并不建议直接使用<code>__proto__</code>属性，主要有两个原因：</p><ul><li>这是隐藏属性，并不是标准定义的。</li><li>使用该属性会造成严重的性能问题。 <ul><li>会重建隐藏类，当改变一个对象的原型链时，它的内部类型也会改变，这意味着所有属性查找优化都被刷新。</li><li>会丢弃预编译代码，退回到未优化的代码。</li></ul></li></ul>`,101),h=[t];function l(e,k,r,d,E,o){return a(),i("div",null,h)}const y=s(p,[["render",l]]);export{c as __pageData,y as default};
