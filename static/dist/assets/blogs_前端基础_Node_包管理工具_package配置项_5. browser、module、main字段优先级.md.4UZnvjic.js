import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.BOW58p_D.js";const g=JSON.parse('{"title":"browser、module、main字段优先级","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/前端基础/Node/包管理工具/package配置项/5. browser、module、main字段优先级.md","filePath":"blogs/前端基础/Node/包管理工具/package配置项/5. browser、module、main字段优先级.md"}'),n={name:"blogs/前端基础/Node/包管理工具/package配置项/5. browser、module、main字段优先级.md"},t=e(`<h1 id="browser、module、main字段优先级" tabindex="-1">browser、module、main字段优先级 <a class="header-anchor" href="#browser、module、main字段优先级" aria-label="Permalink to &quot;browser、module、main字段优先级&quot;">​</a></h1><h2 id="文件优先级" tabindex="-1">文件优先级 <a class="header-anchor" href="#文件优先级" aria-label="Permalink to &quot;文件优先级&quot;">​</a></h2><p>由于我们使用的模块规范有 ESM 和 CommonJS 两种，为了能在 Node 环境下原生执行 ESM 规范的脚本文件，<code>.mjs</code>文件就应运而生。</p><p>当存在<code>index.mjs</code>和<code>index.js</code>这种同名不同后缀的文件时，<code>import &#39;./index&#39;</code>或者<code>require(&#39;./index&#39;)</code>是会优先加载<code>index.mjs</code>文件的。</p><p>也就是说，优先级 <code>mjs</code> &gt; <code>js</code></p><h2 id="browser-module-和-main-字段" tabindex="-1">browser，module 和 main 字段 <a class="header-anchor" href="#browser-module-和-main-字段" aria-label="Permalink to &quot;browser，module 和 main 字段&quot;">​</a></h2><ul><li><code>main</code>：定义了 npm 包的入口文件，浏览器环境和 Node 环境均可使用</li><li><code>module</code>：定义 npm 包的 ESM 规范的入口文件，浏览器环境和 Node 环境均可使用</li><li><code>browser</code>：定义 npm 包在浏览器环境下的入口文件</li></ul><h2 id="使用场景与优先级" tabindex="-1">使用场景与优先级 <a class="header-anchor" href="#使用场景与优先级" aria-label="Permalink to &quot;使用场景与优先级&quot;">​</a></h2><p>假定 npm 包有以下目录结构</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-----</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lib</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.browser.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.browser.mjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.mjs</span></span></code></pre></div><p>其中<code>*.js</code>文件是使用 CommonJS 规范的语法，<code>*.mjs</code>是用 ESM 规范的语法。</p><p><code>package.json</code>文件如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// main </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lib/index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// module</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // browser 可定义成与 main、module 字段一一对应的映射对象，也可以直接定义为字符串</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;browser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.browser.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// browser+cjs</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;./lib/index.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./lib/index.browser.mjs&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // browser+mjs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &quot;browser&quot;: &quot;./lib/index.browser.js&quot; // browser</span></span></code></pre></div><p>根据上述配置，那么<code>package.json</code>指定的入口可以有 5 种情况：</p><ul><li><code>main</code></li><li><code>module</code></li><li><code>browser</code></li><li><code>browser + cjs</code></li><li><code>browser + mjs</code></li></ul><p>下面说下具体使用场景</p><h3 id="web环境" tabindex="-1">Web环境 <a class="header-anchor" href="#web环境" aria-label="Permalink to &quot;Web环境&quot;">​</a></h3><h4 id="webpack-esm" tabindex="-1">Webpack + ESM <a class="header-anchor" href="#webpack-esm" aria-label="Permalink to &quot;Webpack + ESM&quot;">​</a></h4><p>这是最常见的使用场景，通过 Webpack 打包构建 Web 应用，模块语法使用 ESM，常见语法是</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test&#39;</span></span></code></pre></div><p>实际上的加载优先级是<code>browser+mjs -&gt; module -&gt; browser+cjs -&gt; main</code></p><p>也就是说 Webpack 会根据这个顺序去寻找字段指定的文件，直到找到为止。然而实际上的情况可能比这个更加复杂，具体可以参考流程图。</p><blockquote><p>此流程是默认流程，如果项目有用到 Webpack 的，可以通过自行配置<code>webpack -&gt; mainFields</code>改变其加载优先级 。</p></blockquote><img src="https://gitee.com/CwdyBic/myBlog/raw/master/assets/Node/入口文件字段使用流程.png" width="500px"><h4 id="webpack-commonjs" tabindex="-1">Webpack + CommonJS <a class="header-anchor" href="#webpack-commonjs" aria-label="Permalink to &quot;Webpack + CommonJS&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>事实上，构建 Web 应用时，使用 ESM 或者 CommonJS 模块规范对于加载优先级并没有任何影响。优先级依然是：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> browser+mjs -&gt; module -&gt; browser+cjs &gt; main</span></span></code></pre></div><h3 id="node-环境-webpack-esm-commonjs" tabindex="-1">Node 环境 + Webpack + ESM/CommonJS <a class="header-anchor" href="#node-环境-webpack-esm-commonjs" aria-label="Permalink to &quot;Node 环境 + Webpack + ESM/CommonJS&quot;">​</a></h3><p>使用 Webpack 构建项目的时候，有一个<code>target</code>选项，默认为<code>web</code>，即进行 Web 应用构建。当需要进行一些 同构项目，或者其他 Node 项目的构建的时候，需要将<code>webpack.config.js</code>的<code>target</code>选项设置为<code>node</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>优先级是：<code>module -&gt; main</code></p><h3 id="node-环境-commonjs-esm" tabindex="-1">Node 环境 + CommonJS/ESM <a class="header-anchor" href="#node-环境-commonjs-esm" aria-label="Permalink to &quot;Node 环境 + CommonJS/ESM&quot;">​</a></h3><p>通过<code>node test.js</code>直接执行脚本。这种情况只有<code>main</code>字段生效。</p>`,34),l=[t];function o(p,h,d,k,r,c){return a(),i("div",null,l)}const b=s(n,[["render",o]]);export{g as __pageData,b as default};
