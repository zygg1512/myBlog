import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.BOW58p_D.js";const g=JSON.parse('{"title":"tsconfig","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/前端基础/TypeScript/4. tsconfig配置文件/1. tsconfig.md","filePath":"blogs/前端基础/TypeScript/4. tsconfig配置文件/1. tsconfig.md"}'),n={name:"blogs/前端基础/TypeScript/4. tsconfig配置文件/1. tsconfig.md"},l=e(`<h1 id="tsconfig" tabindex="-1">tsconfig <a class="header-anchor" href="#tsconfig" aria-label="Permalink to &quot;tsconfig&quot;">​</a></h1><h2 id="compileonsave" tabindex="-1">compileOnSave <a class="header-anchor" href="#compileonsave" aria-label="Permalink to &quot;compileOnSave&quot;">​</a></h2><p><code>compileOnSave</code>：设置保存文件的时候自动编译，但需要编译器支持</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;compileOnSave&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="extends" tabindex="-1">extends <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;extends&quot;">​</a></h2><ul><li>可选值： &quot;&quot;、[]</li><li>可以通过指定一个其他的 tsconfig.json 文件路径，即一个配置文件可以继承另一个文件的配置属性</li></ul><p>在原文件里的配置最先被加载，原文件里的配置被继承文件里的同名配置所重写。 如果发现循环引用，则会报错</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 把基础配置抽离成tsconfig.base.json文件，然后引入</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./tsconfig.base.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="include、exclude" tabindex="-1">include、exclude <a class="header-anchor" href="#include、exclude" aria-label="Permalink to &quot;include、exclude&quot;">​</a></h2><p>数组类型，<code>include</code>用于表示 ts 管理的文件。<code>exclude</code>用于表示 ts 排除的文件(即不被编译的文件)。其中的文件列表可以使用<code>glob</code>匹配模式列表，支持的<code>glob</code>通配符有：</p><ul><li><code>*</code>匹配0或多个字符（不包括目录分隔符）</li><li><code>?</code>匹配一个任意字符（不包括目录分隔符）</li><li><code>/</code>递归匹配任意子目录</li></ul><p><code>exclude</code>默认情况下会排除<code>node_modules</code>，<code>bower_components</code>，<code>jspm_packages</code>和<code>outDir</code>目录</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;include&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 会编译src目录下的所有文件，包括子目录</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src/*&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 只会编译src一级目录下的文件</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;src/*/*&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 只会编译src二级目录下的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;files&quot;">​</a></h2><p>数组类型，用于表示由 ts 管理的 文件 的具体路径，可以是相对或绝对路径。这些文件内部有依赖的模块(或者引入了哪些模块)，编译器也会搜索到依赖模块进行编译。如果某些模块并没有在项目中引入，虽然在项目目录中也不会被编译。需要注意的是，files 中不支持 glob 匹配模式的路径。</p><p>默认当前目录下除了exclude之外的所有<code>.ts</code>、<code>.d.ts</code>、<code>.tsx</code>文件</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 指定编译文件是src目录下的index.ts文件</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;scr/index.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>注意</p><p>这三者的优先级是这样的：<code>files</code>&gt;<code>exclude</code>&gt;<code>include</code></p><ul><li>如果不指定<code>files</code> ，项目目录下的所有文件都会被编译器编译</li><li>如果同一个文件在三者中均指定，此文件一定会被编译器编译</li><li>在<code>files</code>中不指定而在<code>exclude</code>、<code>include</code>中同时指定的文件也会被编译 <ul><li>因为优先级是这样的<code>exclude</code>&gt;<code>include</code></li></ul></li></ul><h2 id="references" tabindex="-1">references <a class="header-anchor" href="#references" aria-label="Permalink to &quot;references&quot;">​</a></h2><blockquote><p>项目引用是 TypeScript 3.0的新特性，它支持将 TypeScript 程序的结构分割成更小的组成部分。</p></blockquote><p><code>references</code>：指定项目引用的依赖；将两个项目关联起来作为一个项目开发</p><p>当某个项目代码修改后还能单独编译相应的项目而不是整个项目。再说的简单点，就是实现了关联项目间的懒编译。</p><p>假设要开发一个类似于<code>lodash</code>的工具库，并在项目中使用，而且后期很有可能还要在业界推广。为了保证这个工具的顺利开发及推广，必须要做相应的单元测试。那这个工具库可以看做一个项目，对其中的每个功能的测试也可作为一个独立的项目。</p><p>但整个过程中，工具库的开发和测试应该是属于同一个项目下 “分项目” 的。那这种情况下<code>reference</code>就很棒了。首先搭一个目录出来：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- src/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- index.ts    // 整个工具库的入口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- copyDeep.ts // 其中定义了copyDeep方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- test/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- copyDeep.test.ts // copyDeep的单元测试</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- tsconfig.json</span></span></code></pre></div><p>在<code>copyDeep.test.ts</code>中肯定要引用<code>src/copyDeep</code>，也就是说<code>test</code>的项目是依赖于<code>src</code>的</p><ul><li>如果<code>src</code>中的代码发生了变化，整个工具库项目应该重新编译，而<code>test</code>项目不应该再被编译</li><li>如果<code>test</code>项目中的代码发生了变化，那<code>test</code>项目应该被重新编译，而<code>src</code>项目不应该再被编译</li></ul><p>如何在一个项目中配置而做到分别编译相应的子项目呢？</p><p>首先最先想到的应该是在<code>tsconfig.json</code>文件中引入<code>include</code>字段配置，先尝试一下下面的配置：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;./src/index.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;include&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;./test//*.test.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;outDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>来分析这样配置的会有哪些问题：</p><ol><li>首先，从整个项目层面，确实做到了修改任意文件重新编译的功能。但注意，编译的是全量的 ts 文件</li><li>随着日后项目的增大，在<code>*.test.ts</code>文件中引入也将逐渐变大</li><li>修改了<code>src//*.ts</code>的内容，<code>test//*.ts</code>也将作为输出，这是我们不希望看到的</li></ol><p>此时，<code>reference</code>将解决上述的每一个问题，修改项目结构如下：</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- src/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- index.ts    	// 整个工具库的入口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- copyDeep.ts 	// 其中定义了copyDeep方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- tsconfig.json // 工具库的编译配置文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- test/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- copyDeep.test.ts 	// copyDeep的单元测试</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- tsconfig.json 	// 测试的编译配置文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- tsconfig.json</span></span></code></pre></div><p>并修改为以下配置：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根目录下的 tsconfig.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;declaration&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为子项目生成.d.ts声明文件</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;outDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src目录下的 src/tsconfig.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../tsconfig&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;composite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 必须设置为true，表明该文件夹为一个子项目</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// test目录下的 src/tsconfig.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../tsconfig&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;references&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示引用了工具库项目</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这样配置后，如果<code>src</code>项目已经编译完成并且输出了编译后的文件， 那在<code>test</code>项目中，实际加载的是 src 项目声明的<code>.d.ts</code>文件，而且这个声明文件是对<code>test</code>项目可见的</p><p>另外，如果开启了<code>watch</code>模式，修改了内容只会编译相应的项目而不会全量编译。这会显著的加速类型检查和编译，减少编辑器的内存占用。而且在代码结构层命有了一个很清晰的规划。</p><h2 id="typeacquisition" tabindex="-1">typeAcquisition <a class="header-anchor" href="#typeacquisition" aria-label="Permalink to &quot;typeAcquisition&quot;">​</a></h2><p>对象类型，设置自动引入库类型定义文件。acquisition 翻译过来是 “获得物、获得” 的意思。包含 3 个子属性：</p><ul><li><code>enable</code>：布尔类型，是否开启自动引入<code>d.ts</code>，默认为<code>false</code></li><li><code>include</code>：数组类型，允许自动引入的库名，如：[&quot;jquery&quot;, &quot;lodash&quot;]</li><li><code>exculde</code>：数组类型，排除的库名</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;typeAcquisition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;enable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;exclude&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jquery&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;include&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在整个项目中，如果存在用JavaScript写的库，ts 会自动去<code>compilerOptions.typeRoots</code>指定的目录中寻找对应的类型声明文件。这个行为被称为 typeAcquisition (类型获得)。这个行为可以通过<code>enable</code>来开启或关闭，且以库级别来指定应用的范围。</p><h2 id="watchoptions" tabindex="-1">watchOptions <a class="header-anchor" href="#watchoptions" aria-label="Permalink to &quot;watchOptions&quot;">​</a></h2><p>对象类型，typescript3.8 以上新增加的配置，用来配置使用哪种监听策略来跟踪文件和目录。由于<code>tsc</code>的监听文件机制依赖于 node 的<code>fs.watch/fs.watchFile</code>。这两种方法的实现并不相同，前者是采用文件系统的事件做到通知，而后者使用轮询的机制。</p><h3 id="属性配置" tabindex="-1">属性配置 <a class="header-anchor" href="#属性配置" aria-label="Permalink to &quot;属性配置&quot;">​</a></h3><h4 id="watchfile" tabindex="-1">watchFile <a class="header-anchor" href="#watchfile" aria-label="Permalink to &quot;watchFile&quot;">​</a></h4><p>字符串类型，配置单个文件的监听策略，必须为一下几个值：</p><ul><li><code>useFsEvents</code>(默认)：采用系统的文件系统的原生事件机制监听文件更改</li><li><code>useFsEventsOnParentDirectory</code>：采用node的文件系统的原生事件机制监听修改文件所在的目录，这样修改一个文件实际上监听的是此文件所在的目录都被监听了，如此整个项目的文件监听器将显著减少，但可能导致监听并不准确</li><li><code>dynamicPriorityPolling</code>：创建一个动态队列去监听文件，修改频率较低的文件将被减少轮询监听的频率</li><li><code>fixedPollingInterval</code>：固定间隔的检查每个文件是否发生变化</li><li><code>priorityPollingInterval</code>：固定间隔的检查每个文件是否发生变化，但使用启发式监听的文件的检查频率要低于非启发式监听的文件</li></ul><h4 id="watchdirectory" tabindex="-1">watchDirectory <a class="header-anchor" href="#watchdirectory" aria-label="Permalink to &quot;watchDirectory&quot;">​</a></h4><p>字符串类型，配置监听目录的策略，必须为以下几个值：和<code>watchFile</code>中相差不多</p><ul><li><code>useFsEvents</code>(默认)</li><li><code>dynamicPriorityPolling</code></li><li><code>fixedPollingInterval</code></li></ul><h4 id="fallbackpolling" tabindex="-1">fallbackPolling <a class="header-anchor" href="#fallbackpolling" aria-label="Permalink to &quot;fallbackPolling&quot;">​</a></h4><p>当采用node的文件系统中原生事件机制监听文件时，此选项指定本机的文件监听器被耗尽或者不支持本机文件监听器时编译器采用的轮询策略，可以设置为以下几个值：</p><ul><li><code>fixedPollingInterval</code></li><li><code>dynamicPriorityPolling</code></li><li><code>priorityPollingInterval</code></li><li><code>synchronousWatchDirectory</code>：禁用对目录的延迟监听。如果有大量的文件更改，比如在 npm install 时<code>node_modules</code>目录发生的变化，延迟监听是非常有用的。但总有些不常见的场景需要禁用延迟监听</li></ul><h4 id="synchronouswatchdirectory" tabindex="-1">synchronousWatchDirectory <a class="header-anchor" href="#synchronouswatchdirectory" aria-label="Permalink to &quot;synchronousWatchDirectory&quot;">​</a></h4><p>布尔类型，是否对目录延迟监听。如果配置为<code>true</code> ，当文件发生修改时同步的调用回调并更新目录监听器</p><h4 id="excludefiles" tabindex="-1">excludeFiles <a class="header-anchor" href="#excludefiles" aria-label="Permalink to &quot;excludeFiles&quot;">​</a></h4><p>字符串数组，用于指定不需要被监听变化的文件</p><h4 id="excludedirectories" tabindex="-1">excludeDirectories <a class="header-anchor" href="#excludedirectories" aria-label="Permalink to &quot;excludeDirectories&quot;">​</a></h4><p>字符串数组，用于指定不需要被监听变化的目录</p>`,63),t=[l];function p(h,c,o,d,k,r){return a(),i("div",null,t)}const u=s(n,[["render",p]]);export{g as __pageData,u as default};
