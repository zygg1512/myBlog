import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.BOW58p_D.js";const E=JSON.parse('{"title":"常用属性和方法","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/前端基础/JavaScript/正则表达式/常用属性和方法.md","filePath":"blogs/前端基础/JavaScript/正则表达式/常用属性和方法.md"}'),l={name:"blogs/前端基础/JavaScript/正则表达式/常用属性和方法.md"},t=n(`<h1 id="常用属性和方法" tabindex="-1">常用属性和方法 <a class="header-anchor" href="#常用属性和方法" aria-label="Permalink to &quot;常用属性和方法&quot;">​</a></h1><h2 id="正则对象的属性和方法" tabindex="-1">正则对象的属性和方法 <a class="header-anchor" href="#正则对象的属性和方法" aria-label="Permalink to &quot;正则对象的属性和方法&quot;">​</a></h2><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><ul><li><code>global</code>：是否全文搜索，默认 <code>false</code>；如果加上了<code>g</code>修饰符，则为<code>true</code>，且不能通过赋值方式修改</li><li><code>ignoreCase</code>：是否大小写敏感，默认 <code>false</code>；修改方式同 <code>global</code>相同</li><li><code>multiline</code>：多行搜索，默认值是<code>false</code>；修改方式同<code>global</code>相同</li><li><code>source</code>：正则表达式的文本字符串；不包括修饰符</li><li><code>lastIndex</code>：是当前表达式匹配内容的最后一个字符的下一个位置（如果正则表达式没有添加<code>g</code>则<code>lastIndex</code>始终是<code>0</code>）</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //有 g 修饰符</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ab&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg.lastIndex) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//打印 1   2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 第一次打印1，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 是因为当前的匹配字符是a，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 则最后一个字符也是a，a的下一个位置的索引 是1，所以打印1，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 第二次同第一次一样，直到reg.test(&#39;ab&#39;)为 false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *（用 test 方法的效果和 exec() 的效果相同）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><h4 id="regexp-prototype-test-str" tabindex="-1">RegExp.prototype.test(str) <a class="header-anchor" href="#regexp-prototype-test-str" aria-label="Permalink to &quot;RegExp.prototype.test(str)&quot;">​</a></h4><ul><li>用于测试字符串参数中是否存在匹配的正则表达式模式的字符串</li><li>如果存在返回<code>true</code>，否则返回<code>false</code></li></ul><h4 id="regexp-prototype-exec-str" tabindex="-1">RegExp.prototype.exec(str) <a class="header-anchor" href="#regexp-prototype-exec-str" aria-label="Permalink to &quot;RegExp.prototype.exec(str)&quot;">​</a></h4><p>不管表达式中有没有<code>g</code>修饰符，只会执行一次。需要用<code>while</code>循环</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 返回值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 如果没有匹配返回</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 反之返回一个数组</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 第一个元素是与正则表达式相匹配的文本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 第二个元素是与</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RegExp对象的第一个子表达式相匹配的文本（如果有的话）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 第三个元素是与</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RegExp对象的第二个子表达式相匹配的文本（如果有的话），以此类推</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 返回的数组会包含如下属性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index：声明匹配文本的第一个字符的位置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input：存放被检索字符串的</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> string</span></span></code></pre></div><p>例子：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1a2b3c4d&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reg3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ts)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 [&#39;1a2&#39;,&#39;a&#39;,index:0,input:&#39;1a2b3c4d&#39;]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 其中 reg3 变量中 (\\w) 是子表达式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// reg3.lastIndex = 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reg3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1a2b3c4d&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reg3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ts)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 [&#39;1a2&#39;,&#39;a&#39;,index:0,input:&#39;1a2b3c4d&#39;]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// reg3.lastIndex = 3</span></span></code></pre></div><blockquote><p>需要注意的是，不管<code>test()</code>方法、还是<code>exec()</code>，如果表达式中有<code>g</code>修饰符；则当前表达式的<code>lastIndex</code>的值为匹配内容的最后一个字符的下一个位置</p></blockquote><h2 id="字符串方法-与正则表达式相关的" tabindex="-1">字符串方法（与正则表达式相关的） <a class="header-anchor" href="#字符串方法-与正则表达式相关的" aria-label="Permalink to &quot;字符串方法（与正则表达式相关的）&quot;">​</a></h2><h3 id="string-prototype-search-reg" tabindex="-1">String.prototype.search(reg) <a class="header-anchor" href="#string-prototype-search-reg" aria-label="Permalink to &quot;String.prototype.search(reg)&quot;">​</a></h3><ul><li>用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串</li><li>方法返回第一个匹配的结果<code>index</code> (第一个字符的位置)，查找不到返回 <code>-1</code></li><li>不执行全局匹配，将忽略修饰符 g，并且总是从字符串开始检索</li></ul><h3 id="string-prototype-match-reg" tabindex="-1">String.prototype.match(reg) <a class="header-anchor" href="#string-prototype-match-reg" aria-label="Permalink to &quot;String.prototype.match(reg)&quot;">​</a></h3><ul><li><code>match()</code>方法将检索字符串，找出一个或多个与 regexp 匹配的文本</li><li>regexp 是否具有标志<code>g</code>对结果影响很大</li></ul><p>没有加<code>g</code></p><ul><li>只执行一次，如果没有任何匹配返回<code>null</code></li><li>否则将返回数组，其中存放了与它找到的匹配文本有关的信息 <ul><li>返回的数组的第一个元素存放的是匹配的文本，而其余的元素存放的是与正则表达式的自表达式的文本</li><li>除了常规数组元素外，返回的数组还包含两个对象属性 <ul><li>index 声明匹配文本的起始字符的字符串位置</li><li>input 声明对 stringObject 的引用</li></ul></li></ul></li></ul><p>加<code>g</code>的</p><ul><li><code>match()</code>方法将执行全局检索，找到字符串中的所有匹配子字符串 <ul><li>没有找到任何匹配的字符串，返回<code>null</code></li><li>找到了一个或多个匹配的字符串，则返回一个数组</li></ul></li><li>数组元素中存放的是字符串中所有匹配的子串，而且也没有<code>index</code>属性或<code>input</code>属性</li><li>因为是字符串方法，所以<code>lastIndex</code>始终 0</li></ul><h3 id="string-prototype-split-reg" tabindex="-1">String.prototype.split(reg) <a class="header-anchor" href="#string-prototype-split-reg" aria-label="Permalink to &quot;String.prototype.split(reg)&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a1b2c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 [&#39;a&#39;,&#39;1&#39;,&#39;b&#39;,&#39;2&#39;,&#39;c&#39;]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a1b2c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1a2b3c4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 [&#39;&#39;,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;&#39;]</span></span></code></pre></div><h3 id="string-prototype-replace" tabindex="-1">String.prototype.replace() <a class="header-anchor" href="#string-prototype-replace" aria-label="Permalink to &quot;String.prototype.replace()&quot;">​</a></h3><p>用法</p><ul><li><code>String.prototype.replace(str: string | Regexp&lt;any&gt;, replaceString: string)</code>，第二个参数是字符串</li><li><code>String.prototype.replace(str: string | Regexp&lt;any&gt;, fn: () =&gt; {})</code>，第二个参数是函数</li></ul><p>主要说下第二个参数是函数的 <code>String.prototype.replace(str: string | Regexp&lt;any&gt;, fn: () =&gt; {})</code><code>fn</code>会在每次匹配替换的时候调用，有四个参数</p><ol><li>匹配字符串</li><li>正则表达式分组内容，没有分组则没有该参数</li><li>匹配项在字符串中的index(起始位置)</li><li>原字符串</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;a1b2c3d4&#39; -&gt; &#39;a2b3c4d5&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a1b2c3d4.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//console.log打印 1 3 5 7 9</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;a1b2c3d4e5&#39; -&gt; &#39;a12c34e5&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a1b2c3d4e5.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\w</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">group1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">group2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">group3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> group1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> group3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//console.log打印 1b2 3d4</span></span></code></pre></div>`,32),h=[t];function e(p,k,r,d,g,c){return a(),i("div",null,h)}const F=s(l,[["render",e]]);export{E as __pageData,F as default};
